apiVersion: apps/v1
kind: Deployment
metadata:
  name:  bankapp-deploy
  namespace: bank-ns
  labels:
    app:  bankapp-deploy
spec:
  selector:
    matchLabels:
      app: bankapp-deploy
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  bankapp-deploy
    spec:
      initContainers:
      - name: wait-for-mysql
        image: busybox:1.36
        command: ['sh', '-c', 'until nc -zv mysql-svc.bank-ns.svc.cluster.local 3306; do echo "Waiting for MySQL..."; sleep 3; done']

      containers:
      - name:  bankapp-deploy
        image:  MYAPP:latest
        resources:
          requests:
            memory: "512Mi"   # Minimum 512 MB RAM required to run
            cpu: "250m"       # Minimum 0.25 CPU cores (250 millicores)
          limits:
            memory: "1Gi"     # Maximum 1 GB RAM allowed
            cpu: "500m"       # Maximum 0.5 CPU cores allowed
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - "mysqladmin ping -h 127.0.0.1 -u root -p$MYSQL_ROOT_PASSWORD"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        env:
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              name: bankconfig
              key: SPRING_DATASOURCE_URL
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            configMapKeyRef:
              name: bankconfig
              key: SPRING_DATASOURCE_USERNAME
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bankconfig
              key: SPRING_DATASOURCE_PASSWORD
        ports:
        - containerPort: 8080 
        